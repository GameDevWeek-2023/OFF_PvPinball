//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Scripts/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""LeftPlayer"",
            ""id"": ""3df253f3-2564-46a4-94d7-4f88f524828f"",
            ""actions"": [
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""6c7f52ae-2587-4eeb-ba12-00bd74e346ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTriggerLayer2"",
                    ""type"": ""Value"",
                    ""id"": ""3e67438c-9861-462d-8c2c-aaeb3fd818a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""cb693b29-b7fc-45ae-81b5-3afb85cd98c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTriggerLayer2"",
                    ""type"": ""Value"",
                    ""id"": ""b6c89c33-9580-4f7e-a6b6-39a71a3976b0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Control"",
                    ""type"": ""Value"",
                    ""id"": ""fece13ec-9bd5-4b5e-8cf4-5e02022743da"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""0c30d20d-e772-4395-baac-c7272126bbfe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5aa2f028-8f5d-4ede-874e-27fede1d3f4d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""211e1316-d5e1-4375-a269-eb5457267f87"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f643e881-4586-4553-a6fa-83f377b52cab"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""614e1585-cbc0-4994-b8e3-f5af401d4b6c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTriggerLayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""858ccba3-b989-4729-a069-eb72f29e9549"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTriggerLayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f62bbee-a5e5-412c-a825-09da4c49b66f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightPlayer"",
            ""id"": ""194a303d-aac1-4f6f-b89e-a3e8860c09fc"",
            ""actions"": [
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""82af514f-5325-412f-84dc-958ccbf16329"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTriggerLayer2"",
                    ""type"": ""Value"",
                    ""id"": ""68e2d4d3-0e3f-4ded-b3de-66dad328c709"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""6594248f-c1d3-470f-ab78-eb385e21bdec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTriggerLayer2"",
                    ""type"": ""Value"",
                    ""id"": ""59a082a6-23cb-43e4-b70d-1f4d70025b72"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Control"",
                    ""type"": ""Value"",
                    ""id"": ""3bdd3f68-612e-4aa7-9e4d-3088dc0f5c8a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d340c8f-b6be-463b-a71c-457842b9c8d7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1eb8de1-d24e-406f-b954-19e77fc86211"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a547ee9c-36fd-498a-a896-50d61893d11a"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4980abc9-f183-4fef-8788-6941594094cc"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTriggerLayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68d09f02-bf68-463e-8615-3c51eb394aca"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTriggerLayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""c98e5b7a-11cc-4d79-a8f2-8055a565873d"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""f94e431f-639f-4d90-b6f0-e8cac35824bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""4082ebf5-1b0c-4d9b-a24a-0d23d1bccf8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ea5cf28-90c3-4575-89ce-0fe300ed472d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3c6f6cb-5557-45d2-baaa-621d575169eb"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftPlayer
        m_LeftPlayer = asset.FindActionMap("LeftPlayer", throwIfNotFound: true);
        m_LeftPlayer_LeftTrigger = m_LeftPlayer.FindAction("LeftTrigger", throwIfNotFound: true);
        m_LeftPlayer_LeftTriggerLayer2 = m_LeftPlayer.FindAction("LeftTriggerLayer2", throwIfNotFound: true);
        m_LeftPlayer_RightTrigger = m_LeftPlayer.FindAction("RightTrigger", throwIfNotFound: true);
        m_LeftPlayer_RightTriggerLayer2 = m_LeftPlayer.FindAction("RightTriggerLayer2", throwIfNotFound: true);
        m_LeftPlayer_Control = m_LeftPlayer.FindAction("Control", throwIfNotFound: true);
        m_LeftPlayer_Fire = m_LeftPlayer.FindAction("Fire", throwIfNotFound: true);
        // RightPlayer
        m_RightPlayer = asset.FindActionMap("RightPlayer", throwIfNotFound: true);
        m_RightPlayer_LeftTrigger = m_RightPlayer.FindAction("LeftTrigger", throwIfNotFound: true);
        m_RightPlayer_LeftTriggerLayer2 = m_RightPlayer.FindAction("LeftTriggerLayer2", throwIfNotFound: true);
        m_RightPlayer_RightTrigger = m_RightPlayer.FindAction("RightTrigger", throwIfNotFound: true);
        m_RightPlayer_RightTriggerLayer2 = m_RightPlayer.FindAction("RightTriggerLayer2", throwIfNotFound: true);
        m_RightPlayer_Control = m_RightPlayer.FindAction("Control", throwIfNotFound: true);
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Start = m_Game.FindAction("Start", throwIfNotFound: true);
        m_Game_Pause = m_Game.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftPlayer
    private readonly InputActionMap m_LeftPlayer;
    private List<ILeftPlayerActions> m_LeftPlayerActionsCallbackInterfaces = new List<ILeftPlayerActions>();
    private readonly InputAction m_LeftPlayer_LeftTrigger;
    private readonly InputAction m_LeftPlayer_LeftTriggerLayer2;
    private readonly InputAction m_LeftPlayer_RightTrigger;
    private readonly InputAction m_LeftPlayer_RightTriggerLayer2;
    private readonly InputAction m_LeftPlayer_Control;
    private readonly InputAction m_LeftPlayer_Fire;
    public struct LeftPlayerActions
    {
        private @Input m_Wrapper;
        public LeftPlayerActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTrigger => m_Wrapper.m_LeftPlayer_LeftTrigger;
        public InputAction @LeftTriggerLayer2 => m_Wrapper.m_LeftPlayer_LeftTriggerLayer2;
        public InputAction @RightTrigger => m_Wrapper.m_LeftPlayer_RightTrigger;
        public InputAction @RightTriggerLayer2 => m_Wrapper.m_LeftPlayer_RightTriggerLayer2;
        public InputAction @Control => m_Wrapper.m_LeftPlayer_Control;
        public InputAction @Fire => m_Wrapper.m_LeftPlayer_Fire;
        public InputActionMap Get() { return m_Wrapper.m_LeftPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ILeftPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Add(instance);
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @LeftTriggerLayer2.started += instance.OnLeftTriggerLayer2;
            @LeftTriggerLayer2.performed += instance.OnLeftTriggerLayer2;
            @LeftTriggerLayer2.canceled += instance.OnLeftTriggerLayer2;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
            @RightTriggerLayer2.started += instance.OnRightTriggerLayer2;
            @RightTriggerLayer2.performed += instance.OnRightTriggerLayer2;
            @RightTriggerLayer2.canceled += instance.OnRightTriggerLayer2;
            @Control.started += instance.OnControl;
            @Control.performed += instance.OnControl;
            @Control.canceled += instance.OnControl;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(ILeftPlayerActions instance)
        {
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @LeftTriggerLayer2.started -= instance.OnLeftTriggerLayer2;
            @LeftTriggerLayer2.performed -= instance.OnLeftTriggerLayer2;
            @LeftTriggerLayer2.canceled -= instance.OnLeftTriggerLayer2;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
            @RightTriggerLayer2.started -= instance.OnRightTriggerLayer2;
            @RightTriggerLayer2.performed -= instance.OnRightTriggerLayer2;
            @RightTriggerLayer2.canceled -= instance.OnRightTriggerLayer2;
            @Control.started -= instance.OnControl;
            @Control.performed -= instance.OnControl;
            @Control.canceled -= instance.OnControl;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(ILeftPlayerActions instance)
        {
            if (m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftPlayerActions @LeftPlayer => new LeftPlayerActions(this);

    // RightPlayer
    private readonly InputActionMap m_RightPlayer;
    private List<IRightPlayerActions> m_RightPlayerActionsCallbackInterfaces = new List<IRightPlayerActions>();
    private readonly InputAction m_RightPlayer_LeftTrigger;
    private readonly InputAction m_RightPlayer_LeftTriggerLayer2;
    private readonly InputAction m_RightPlayer_RightTrigger;
    private readonly InputAction m_RightPlayer_RightTriggerLayer2;
    private readonly InputAction m_RightPlayer_Control;
    public struct RightPlayerActions
    {
        private @Input m_Wrapper;
        public RightPlayerActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTrigger => m_Wrapper.m_RightPlayer_LeftTrigger;
        public InputAction @LeftTriggerLayer2 => m_Wrapper.m_RightPlayer_LeftTriggerLayer2;
        public InputAction @RightTrigger => m_Wrapper.m_RightPlayer_RightTrigger;
        public InputAction @RightTriggerLayer2 => m_Wrapper.m_RightPlayer_RightTriggerLayer2;
        public InputAction @Control => m_Wrapper.m_RightPlayer_Control;
        public InputActionMap Get() { return m_Wrapper.m_RightPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IRightPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Add(instance);
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @LeftTriggerLayer2.started += instance.OnLeftTriggerLayer2;
            @LeftTriggerLayer2.performed += instance.OnLeftTriggerLayer2;
            @LeftTriggerLayer2.canceled += instance.OnLeftTriggerLayer2;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
            @RightTriggerLayer2.started += instance.OnRightTriggerLayer2;
            @RightTriggerLayer2.performed += instance.OnRightTriggerLayer2;
            @RightTriggerLayer2.canceled += instance.OnRightTriggerLayer2;
            @Control.started += instance.OnControl;
            @Control.performed += instance.OnControl;
            @Control.canceled += instance.OnControl;
        }

        private void UnregisterCallbacks(IRightPlayerActions instance)
        {
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @LeftTriggerLayer2.started -= instance.OnLeftTriggerLayer2;
            @LeftTriggerLayer2.performed -= instance.OnLeftTriggerLayer2;
            @LeftTriggerLayer2.canceled -= instance.OnLeftTriggerLayer2;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
            @RightTriggerLayer2.started -= instance.OnRightTriggerLayer2;
            @RightTriggerLayer2.performed -= instance.OnRightTriggerLayer2;
            @RightTriggerLayer2.canceled -= instance.OnRightTriggerLayer2;
            @Control.started -= instance.OnControl;
            @Control.performed -= instance.OnControl;
            @Control.canceled -= instance.OnControl;
        }

        public void RemoveCallbacks(IRightPlayerActions instance)
        {
            if (m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_RightPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightPlayerActions @RightPlayer => new RightPlayerActions(this);

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_Start;
    private readonly InputAction m_Game_Pause;
    public struct GameActions
    {
        private @Input m_Wrapper;
        public GameActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_Game_Start;
        public InputAction @Pause => m_Wrapper.m_Game_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @Start.started += instance.OnStart;
            @Start.performed += instance.OnStart;
            @Start.canceled += instance.OnStart;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @Start.started -= instance.OnStart;
            @Start.performed -= instance.OnStart;
            @Start.canceled -= instance.OnStart;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface ILeftPlayerActions
    {
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnLeftTriggerLayer2(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
        void OnRightTriggerLayer2(InputAction.CallbackContext context);
        void OnControl(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
    public interface IRightPlayerActions
    {
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnLeftTriggerLayer2(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
        void OnRightTriggerLayer2(InputAction.CallbackContext context);
        void OnControl(InputAction.CallbackContext context);
    }
    public interface IGameActions
    {
        void OnStart(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
